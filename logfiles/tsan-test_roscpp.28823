==================
WARNING: ThreadSanitizer: lock-order-inversion (potential deadlock) (pid=28823)
  Cycle in lock order graph: M448 (0x7fe4ba2430a8) => M451 (0x7fe4ba243148) => M448

  Mutex M451 acquired here while holding mutex M448 in main thread:
    #0 pthread_mutex_lock <null> (libtsan.so.0+0x3faeb)
    #1 log4cxx::helpers::synchronized::synchronized(log4cxx::helpers::Mutex const&) <null> (liblog4cxx.so.10+0x14acdb)

    Hint: use TSAN_OPTIONS=second_deadlock_stack=1 to get more informative warning message

  Mutex M448 acquired here while holding mutex M451 in main thread:
    #0 pthread_mutex_lock <null> (libtsan.so.0+0x3faeb)
    #1 log4cxx::helpers::synchronized::synchronized(log4cxx::helpers::Mutex const&) <null> (liblog4cxx.so.10+0x14acdb)

SUMMARY: ThreadSanitizer: lock-order-inversion (potential deadlock) (/usr/lib/x86_64-linux-gnu/libtsan.so.0+0x3faeb) in __interceptor_pthread_mutex_lock
==================
==================
WARNING: ThreadSanitizer: lock-order-inversion (potential deadlock) (pid=28823)
  Cycle in lock order graph: M424 (0x7fe4b8bf2720) => M448 (0x7fe4ba2430a8) => M451 (0x7fe4ba243148) => M424

  Mutex M448 acquired here while holding mutex M424 in main thread:
    #0 pthread_mutex_lock <null> (libtsan.so.0+0x3faeb)
    #1 log4cxx::helpers::synchronized::synchronized(log4cxx::helpers::Mutex const&) <null> (liblog4cxx.so.10+0x14acdb)
    #2 __libc_start_main <null> (libc.so.6+0x21b96)

    Hint: use TSAN_OPTIONS=second_deadlock_stack=1 to get more informative warning message

  Mutex M451 acquired here while holding mutex M448 in main thread:
    #0 pthread_mutex_lock <null> (libtsan.so.0+0x3faeb)
    #1 log4cxx::helpers::synchronized::synchronized(log4cxx::helpers::Mutex const&) <null> (liblog4cxx.so.10+0x14acdb)

  Mutex M424 acquired here while holding mutex M451 in main thread:
    #0 pthread_mutex_lock <null> (libtsan.so.0+0x3faeb)
    #1 boost::unique_lock<boost::mutex>::lock() <null> (libroscpp.so+0xa52a7)
    #2 void boost::_bi::list2<boost::arg<1>, boost::reference_wrapper<ros::Publisher> >::operator()<void (*)(ros::SingleSubscriberPublisher const&, ros::Publisher&), boost::_bi::rrlist1<ros::SingleSubscriberPublisher const&> >(boost::_bi::type<void>, void (*&)(ros::SingleSubscriberPublisher const&, ros::Publisher&), boost::_bi::rrlist1<ros::SingleSubscriberPublisher const&>&, int) /usr/include/boost/bind/bind.hpp:319 (test_roscpp-publish_empty+0x1099d)
    #3 void boost::_bi::bind_t<void, void (*)(ros::SingleSubscriberPublisher const&, ros::Publisher&), boost::_bi::list2<boost::arg<1>, boost::reference_wrapper<ros::Publisher> > >::operator()<ros::SingleSubscriberPublisher const&>(ros::SingleSubscriberPublisher const&) /usr/include/boost/bind/bind.hpp:1306 (test_roscpp-publish_empty+0x1028e)
    #4 boost::detail::function::void_function_obj_invoker1<boost::_bi::bind_t<void, void (*)(ros::SingleSubscriberPublisher const&, ros::Publisher&), boost::_bi::list2<boost::arg<1>, boost::reference_wrapper<ros::Publisher> > >, void, ros::SingleSubscriberPublisher const&>::invoke(boost::detail::function::function_buffer&, ros::SingleSubscriberPublisher const&) /usr/include/boost/function/function_template.hpp:159 (test_roscpp-publish_empty+0xfad0)
    #5 ros::PeerConnDisconnCallback::call() <null> (libroscpp.so+0xe596d)
    #6 __libc_start_main <null> (libc.so.6+0x21b96)

SUMMARY: ThreadSanitizer: lock-order-inversion (potential deadlock) (/usr/lib/x86_64-linux-gnu/libtsan.so.0+0x3faeb) in __interceptor_pthread_mutex_lock
==================
==================
WARNING: ThreadSanitizer: lock-order-inversion (potential deadlock) (pid=28823)
  Cycle in lock order graph: M448 (0x7fe4ba2430a8) => M451 (0x7fe4ba243148) => M448

  Mutex M451 acquired here while holding mutex M448 in main thread:
    #0 pthread_mutex_lock <null> (libtsan.so.0+0x3faeb)
    #1 log4cxx::helpers::synchronized::synchronized(log4cxx::helpers::Mutex const&) <null> (liblog4cxx.so.10+0x14acdb)

    Hint: use TSAN_OPTIONS=second_deadlock_stack=1 to get more informative warning message

  Mutex M448 acquired here while holding mutex M451 in main thread:
    #0 pthread_mutex_lock <null> (libtsan.so.0+0x3faeb)
    #1 log4cxx::helpers::synchronized::synchronized(log4cxx::helpers::Mutex const&) <null> (liblog4cxx.so.10+0x14acdb)

SUMMARY: ThreadSanitizer: lock-order-inversion (potential deadlock) (/usr/lib/x86_64-linux-gnu/libtsan.so.0+0x3faeb) in __interceptor_pthread_mutex_lock
==================
==================
WARNING: ThreadSanitizer: lock-order-inversion (potential deadlock) (pid=28823)
  Cycle in lock order graph: M587 (0x7b44000004a8) => M576 (0x7b48000002b0) => M587

  Mutex M576 acquired here while holding mutex M587 in main thread:
    #0 pthread_mutex_lock <null> (libtsan.so.0+0x3faeb)
    #1 ros::PollManager::addPollThreadListener(boost::function<void ()> const&) <null> (libroscpp.so+0xdaab2)
    #2 __libc_start_main <null> (libc.so.6+0x21b96)

    Hint: use TSAN_OPTIONS=second_deadlock_stack=1 to get more informative warning message

  Mutex M587 acquired here while holding mutex M576 in thread T1:
    #0 pthread_mutex_lock <null> (libtsan.so.0+0x3faeb)
    #1 boost::unique_lock<boost::mutex>::lock() <null> (libroscpp.so+0xa52a7)

  Thread T1 (tid=28846, running) created by main thread at:
    #0 pthread_create <null> (libtsan.so.0+0x2bcfe)
    #1 boost::thread::start_thread_noexcept() <null> (libboost_thread.so.1.65.1+0x10b09)
    #2 __libc_start_main <null> (libc.so.6+0x21b96)

SUMMARY: ThreadSanitizer: lock-order-inversion (potential deadlock) (/usr/lib/x86_64-linux-gnu/libtsan.so.0+0x3faeb) in __interceptor_pthread_mutex_lock
==================
==================
WARNING: ThreadSanitizer: lock-order-inversion (potential deadlock) (pid=28823)
  Cycle in lock order graph: M448 (0x7fe4ba2430a8) => M451 (0x7fe4ba243148) => M424 (0x7fe4b8bf2720) => M448

  Mutex M451 acquired here while holding mutex M448 in main thread:
    #0 pthread_mutex_lock <null> (libtsan.so.0+0x3faeb)
    #1 log4cxx::helpers::synchronized::synchronized(log4cxx::helpers::Mutex const&) <null> (liblog4cxx.so.10+0x14acdb)

    Hint: use TSAN_OPTIONS=second_deadlock_stack=1 to get more informative warning message

  Mutex M424 acquired here while holding mutex M451 in main thread:
    #0 pthread_mutex_lock <null> (libtsan.so.0+0x3faeb)
    #1 boost::unique_lock<boost::mutex>::lock() <null> (libroscpp.so+0xa52a7)
    #2 void boost::_bi::list2<boost::arg<1>, boost::reference_wrapper<ros::Publisher> >::operator()<void (*)(ros::SingleSubscriberPublisher const&, ros::Publisher&), boost::_bi::rrlist1<ros::SingleSubscriberPublisher const&> >(boost::_bi::type<void>, void (*&)(ros::SingleSubscriberPublisher const&, ros::Publisher&), boost::_bi::rrlist1<ros::SingleSubscriberPublisher const&>&, int) /usr/include/boost/bind/bind.hpp:319 (test_roscpp-publish_empty+0x1099d)
    #3 void boost::_bi::bind_t<void, void (*)(ros::SingleSubscriberPublisher const&, ros::Publisher&), boost::_bi::list2<boost::arg<1>, boost::reference_wrapper<ros::Publisher> > >::operator()<ros::SingleSubscriberPublisher const&>(ros::SingleSubscriberPublisher const&) /usr/include/boost/bind/bind.hpp:1306 (test_roscpp-publish_empty+0x1028e)
    #4 boost::detail::function::void_function_obj_invoker1<boost::_bi::bind_t<void, void (*)(ros::SingleSubscriberPublisher const&, ros::Publisher&), boost::_bi::list2<boost::arg<1>, boost::reference_wrapper<ros::Publisher> > >, void, ros::SingleSubscriberPublisher const&>::invoke(boost::detail::function::function_buffer&, ros::SingleSubscriberPublisher const&) /usr/include/boost/function/function_template.hpp:159 (test_roscpp-publish_empty+0xfad0)
    #5 ros::PeerConnDisconnCallback::call() <null> (libroscpp.so+0xe596d)
    #6 __libc_start_main <null> (libc.so.6+0x21b96)

  Mutex M448 acquired here while holding mutex M424 in main thread:
    #0 pthread_mutex_lock <null> (libtsan.so.0+0x3faeb)
    #1 log4cxx::helpers::synchronized::synchronized(log4cxx::helpers::Mutex const&) <null> (liblog4cxx.so.10+0x14acdb)
    #2 __libc_start_main <null> (libc.so.6+0x21b96)

SUMMARY: ThreadSanitizer: lock-order-inversion (potential deadlock) (/usr/lib/x86_64-linux-gnu/libtsan.so.0+0x3faeb) in __interceptor_pthread_mutex_lock
==================
==================
WARNING: ThreadSanitizer: lock-order-inversion (potential deadlock) (pid=28823)
  Cycle in lock order graph: M448 (0x7fe4ba2430a8) => M451 (0x7fe4ba243148) => M424 (0x7fe4b8bf2720) => M448

  Mutex M451 acquired here while holding mutex M448 in main thread:
    #0 pthread_mutex_lock <null> (libtsan.so.0+0x3faeb)
    #1 log4cxx::helpers::synchronized::synchronized(log4cxx::helpers::Mutex const&) <null> (liblog4cxx.so.10+0x14acdb)

    Hint: use TSAN_OPTIONS=second_deadlock_stack=1 to get more informative warning message

  Mutex M424 acquired here while holding mutex M451 in main thread:
    #0 pthread_mutex_lock <null> (libtsan.so.0+0x3faeb)
    #1 boost::unique_lock<boost::mutex>::lock() <null> (libroscpp.so+0xa52a7)
    #2 void boost::_bi::list2<boost::arg<1>, boost::reference_wrapper<ros::Publisher> >::operator()<void (*)(ros::SingleSubscriberPublisher const&, ros::Publisher&), boost::_bi::rrlist1<ros::SingleSubscriberPublisher const&> >(boost::_bi::type<void>, void (*&)(ros::SingleSubscriberPublisher const&, ros::Publisher&), boost::_bi::rrlist1<ros::SingleSubscriberPublisher const&>&, int) /usr/include/boost/bind/bind.hpp:319 (test_roscpp-publish_empty+0x1099d)
    #3 void boost::_bi::bind_t<void, void (*)(ros::SingleSubscriberPublisher const&, ros::Publisher&), boost::_bi::list2<boost::arg<1>, boost::reference_wrapper<ros::Publisher> > >::operator()<ros::SingleSubscriberPublisher const&>(ros::SingleSubscriberPublisher const&) /usr/include/boost/bind/bind.hpp:1306 (test_roscpp-publish_empty+0x1028e)
    #4 boost::detail::function::void_function_obj_invoker1<boost::_bi::bind_t<void, void (*)(ros::SingleSubscriberPublisher const&, ros::Publisher&), boost::_bi::list2<boost::arg<1>, boost::reference_wrapper<ros::Publisher> > >, void, ros::SingleSubscriberPublisher const&>::invoke(boost::detail::function::function_buffer&, ros::SingleSubscriberPublisher const&) /usr/include/boost/function/function_template.hpp:159 (test_roscpp-publish_empty+0xfad0)
    #5 ros::PeerConnDisconnCallback::call() <null> (libroscpp.so+0xe596d)
    #6 __libc_start_main <null> (libc.so.6+0x21b96)

  Mutex M448 acquired here while holding mutex M424 in main thread:
    #0 pthread_mutex_lock <null> (libtsan.so.0+0x3faeb)
    #1 log4cxx::helpers::synchronized::synchronized(log4cxx::helpers::Mutex const&) <null> (liblog4cxx.so.10+0x14acdb)
    #2 __libc_start_main <null> (libc.so.6+0x21b96)

SUMMARY: ThreadSanitizer: lock-order-inversion (potential deadlock) (/usr/lib/x86_64-linux-gnu/libtsan.so.0+0x3faeb) in __interceptor_pthread_mutex_lock
==================
==================
WARNING: ThreadSanitizer: lock-order-inversion (potential deadlock) (pid=28823)
  Cycle in lock order graph: M448 (0x7fe4ba2430a8) => M451 (0x7fe4ba243148) => M424 (0x7fe4b8bf2720) => M448

  Mutex M451 acquired here while holding mutex M448 in main thread:
    #0 pthread_mutex_lock <null> (libtsan.so.0+0x3faeb)
    #1 log4cxx::helpers::synchronized::synchronized(log4cxx::helpers::Mutex const&) <null> (liblog4cxx.so.10+0x14acdb)

    Hint: use TSAN_OPTIONS=second_deadlock_stack=1 to get more informative warning message

  Mutex M424 acquired here while holding mutex M451 in main thread:
    #0 pthread_mutex_lock <null> (libtsan.so.0+0x3faeb)
    #1 boost::unique_lock<boost::mutex>::lock() <null> (libroscpp.so+0xa52a7)
    #2 void boost::_bi::list2<boost::arg<1>, boost::reference_wrapper<ros::Publisher> >::operator()<void (*)(ros::SingleSubscriberPublisher const&, ros::Publisher&), boost::_bi::rrlist1<ros::SingleSubscriberPublisher const&> >(boost::_bi::type<void>, void (*&)(ros::SingleSubscriberPublisher const&, ros::Publisher&), boost::_bi::rrlist1<ros::SingleSubscriberPublisher const&>&, int) /usr/include/boost/bind/bind.hpp:319 (test_roscpp-publish_empty+0x1099d)
    #3 void boost::_bi::bind_t<void, void (*)(ros::SingleSubscriberPublisher const&, ros::Publisher&), boost::_bi::list2<boost::arg<1>, boost::reference_wrapper<ros::Publisher> > >::operator()<ros::SingleSubscriberPublisher const&>(ros::SingleSubscriberPublisher const&) /usr/include/boost/bind/bind.hpp:1306 (test_roscpp-publish_empty+0x1028e)
    #4 boost::detail::function::void_function_obj_invoker1<boost::_bi::bind_t<void, void (*)(ros::SingleSubscriberPublisher const&, ros::Publisher&), boost::_bi::list2<boost::arg<1>, boost::reference_wrapper<ros::Publisher> > >, void, ros::SingleSubscriberPublisher const&>::invoke(boost::detail::function::function_buffer&, ros::SingleSubscriberPublisher const&) /usr/include/boost/function/function_template.hpp:159 (test_roscpp-publish_empty+0xfad0)
    #5 ros::PeerConnDisconnCallback::call() <null> (libroscpp.so+0xe596d)
    #6 __libc_start_main <null> (libc.so.6+0x21b96)

  Mutex M448 acquired here while holding mutex M424 in main thread:
    #0 pthread_mutex_lock <null> (libtsan.so.0+0x3faeb)
    #1 log4cxx::helpers::synchronized::synchronized(log4cxx::helpers::Mutex const&) <null> (liblog4cxx.so.10+0x14acdb)
    #2 __libc_start_main <null> (libc.so.6+0x21b96)

SUMMARY: ThreadSanitizer: lock-order-inversion (potential deadlock) (/usr/lib/x86_64-linux-gnu/libtsan.so.0+0x3faeb) in __interceptor_pthread_mutex_lock
==================
ThreadSanitizer: reported 7 warnings
